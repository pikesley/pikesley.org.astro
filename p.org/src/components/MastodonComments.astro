---
const { mastodon } = Astro.props;

if (!("host" in mastodon)) {
  mastodon.host = "mastodon.me.uk";
}

if (!("user" in mastodon)) {
  mastodon.user = "pikesley";
}

const tootUrl =
  "https://" + mastodon.host + "/@" + mastodon.user + "/" + mastodon.toot;

const indent = "1rem";
---

<hr />

<noscript>
  <div id="error">
    Please enable JavaScript to view the comments powered by the Fediverse.
  </div>
</noscript>

<p>
  These comments are generated from replies to <a href={tootUrl}
    >this Mastodon post</a
  >
</p>
<div id="mastodon-comments"></div>

<script define:vars={{ mastodon: mastodon, indent: indent }}>
  const host = mastodon.host;
  const id = mastodon.toot;
  var commentsLoaded = false;

  function escapeHtml(unsafe) {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  function userAccount(account) {
    var result = `@${account.acct}`;
    if (account.acct.indexOf("@") === -1) {
      const domain = new URL(account.url);
      result += `@${domain.hostname}`;
    }
    return result;
  }

  function makeLink(url, klass = null) {
    const link = document.createElement("a");
    link.setAttribute("rel", "nofollow");
    if (klass) {
      link.setAttribute("class", klass);
    }
    link.setAttribute("href", url);
    return link;
  }

  function fixEmojis(text, emojis) {
    const emojiMatcher = /:([A-Za-z0-9]*):/;
    const fixed = [];

    text.split(" ").forEach(function (word) {
      const match = word.match(emojiMatcher);
      if (match) {
        const ourEmoji = emojis.filter(
          (emoji) => emoji["shortcode"] == match[1]
        )[0];

        const image = document.createElement("img");
        image.setAttribute("class", "emoji");
        image.setAttribute("alt", ourEmoji.shortcode);
        image.setAttribute("src", ourEmoji.static_url);

        fixed.push(image.outerHTML);
      } else {
        fixed.push(word);
      }
    });

    return fixed.join(" ");
  }

  function fixTimestamp(timestamp) {
    dayjs.extend(dayjs_plugin_advancedFormat); // to get ordinal days

    var format = "MMMM Do [at] HH:MM";

    if (new Date().getFullYear() != new Date(timestamp).getFullYear()) {
      format = "MMMM Do, YYYY [at] HH:MM";
    }
    return dayjs(timestamp).format(format);
  }

  function clearDiv(someDiv) {
    while (someDiv.firstChild) {
      someDiv.removeChild(someDiv.firstChild);
    }
  }

  function renderToots(toots, in_reply_to, depth) {
    const tootsToRender = toots.filter(
      (toot) => toot.in_reply_to_id === in_reply_to
    );
    tootsToRender.forEach((toot) => renderToot(toots, toot, depth));
  }

  function renderToot(toots, toot, depth) {
    // avatar
    var avatar = document.createElement("img");
    avatar.setAttribute("src", escapeHtml(toot.account.avatar_static));
    var avatarLink = makeLink(toot.account.url);
    avatarLink.append(avatar);
    var avatarDiv = document.createElement("div");
    avatarDiv.setAttribute("class", "avatar");
    avatarDiv.append(avatarLink);

    // names
    var displaynameLink = makeLink(toot.account.url, "display-name");
    displaynameLink.innerHTML = fixEmojis(
      escapeHtml(toot.account.display_name),
      toot.account.emojis
    );

    var usernameLink = makeLink(toot.account.url, "username");
    usernameLink.append(userAccount(toot.account));
    var namesDiv = document.createElement("div");
    namesDiv.setAttribute("class", "mastodon-names");
    namesDiv.append(displaynameLink);
    namesDiv.append(usernameLink);

    // timestamp
    var timestamp = makeLink(toot.url);
    timestamp.append(fixTimestamp(toot.created_at));
    var timestampDiv = document.createElement("time");
    timestampDiv.setAttribute("class", "toot-timestamp");
    timestampDiv.append(timestamp);

    // content
    var contentDiv = document.createElement("div");
    contentDiv.setAttribute("class", "comment-content");
    contentDiv.innerHTML = toot.content;

    // stats
    var star = document.createElement("span");
    star.setAttribute("class", "mdi mdi-star");
    var favCount = document.createElement("span");
    favCount.append(star);
    favCount.append(toot.favourites_count);

    var boost = document.createElement("span");
    boost.setAttribute("class", "mdi mdi-repeat-variant");
    var boostCount = document.createElement("span");
    boostCount.append(boost);
    boostCount.append(toot.reblogs_count);

    var statsDiv = document.createElement("div");
    statsDiv.setAttribute("class", "toot-stats");
    statsDiv.append(favCount);
    statsDiv.append(boostCount);

    // assemble it all
    var mastodonComment = document.createElement("div");
    mastodonComment.setAttribute("class", "mastodon-comment");
    mastodonComment.setAttribute(
      "style",
      "margin-left: calc(" + indent + " * " + depth + ")"
    );

    mastodonComment.append(avatarDiv);
    mastodonComment.append(namesDiv);
    mastodonComment.append(timestampDiv);
    mastodonComment.append(contentDiv);
    // mastodonComment.append(statsDiv);

    document
      .getElementById("mastodon-comments")
      .appendChild(
        DOMPurify.sanitize(mastodonComment, { RETURN_DOM_FRAGMENT: true })
      );

    renderToots(toots, toot.id, depth + 1);
  }

  function loadComments() {
    if (commentsLoaded) return;

    const commentsDiv = document.getElementById("mastodon-comments");

    clearDiv(commentsDiv);
    const loadingComments = document.createElement("p");
    loadingComments.append("Loading comments from Mastodon");
    commentsDiv.append(loadingComments);

    fetch("https://" + host + "/api/v1/statuses/" + id + "/context")
      .then(function (response) {
        return response.json();
      })
      .then(function (data) {
        if (
          data["descendants"] &&
          Array.isArray(data["descendants"]) &&
          data["descendants"].length > 0
        ) {
          clearDiv(commentsDiv);
          renderToots(data["descendants"], id, 0);
        } else {
          clearDiv(commentsDiv);
          const noCommentsYet = document.createElement("p");
          noCommentsYet.append("No comments yet");
          commentsDiv.append(noCommentsYet);
        }

        commentsLoaded = true;
      });
  }

  function respondToVisibility(element, callback) {
    const options = {
      root: null,
    };

    const observer = new IntersectionObserver((entries, observer) => {
      entries.forEach((entry) => {
        if (entry.intersectionRatio > 0) {
          callback();
        }
      });
    }, options);

    observer.observe(element);
  }

  const comments = document.getElementById("mastodon-comments");
  respondToVisibility(comments, loadComments);
</script>

<style is:global>
  div.mastodon-comment {
    display: grid;
    grid-template-areas:
      "avatar mastodon-names"
      "avatar timestamp"
      "toot toot"
      "toot-stats toot-stats";
    grid-template-columns: 1fr 3fr;
    border: 1px solid var(--palette-gold);

    padding: 1rem;
    gap: 0.5rem;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }

  div.mastodon-comment img {
    width: 20dvw;
  }

  div.mastodon-comment img.emoji {
    height: 1.2rem;
    width: 1.2rem;
  }

  div.mastodon-comment div.avatar {
    grid-area: avatar;
  }

  div.mastodon-comment div.mastodon-names {
    grid-area: mastodon-names;
    display: flex;
    justify-content: left;
    align-items: flex-end;
    flex-wrap: wrap;
  }

  div.mastodon-comment a.username {
    display: none;
  }

  div.mastodon-comment time {
    grid-area: timestamp;
  }

  div.mastodon-comment div.mastodon-names,
  time.toot-timestamp,
  div.toot-stats {
    font-size: 1rem;
  }

  div.mastodon-comment div.comment-content {
    grid-area: toot;
    margin: 0;
  }

  div.mastodon-comment div.toot-stats {
    grid-area: toot-stats;
    display: flex;
    justify-content: right;
    column-gap: 1rem;
  }

  div.mastodon-comment p {
    margin: 0;
  }

  hr {
    border: 0;
    height: 1px;
    border-top: 1px solid var(--palette-gold);
  }

  @media only screen and (min-width: 600px) {
    div.mastodon-comment {
      grid-template-columns: 1fr 8fr;
    }

    div.mastodon-comment img {
      width: 5dvw;
    }
  }
</style>
